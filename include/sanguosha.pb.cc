// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sanguosha.proto

#include "sanguosha.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fsanguosha_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameAction;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GameStart;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Heartbeat;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LoginRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LoginResponse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PlayerState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoomInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RoomRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameState;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsanguosha_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RoomResponse;
}  // namespace protobuf_proto_2fsanguosha_2eproto
namespace sanguosha {
class LoginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest>
      _instance;
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse>
      _instance;
} _LoginResponse_default_instance_;
class HeartbeatDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat>
      _instance;
} _Heartbeat_default_instance_;
class RoomInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomInfo>
      _instance;
} _RoomInfo_default_instance_;
class RoomRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomRequest>
      _instance;
} _RoomRequest_default_instance_;
class RoomResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RoomResponse>
      _instance;
} _RoomResponse_default_instance_;
class GameActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameAction>
      _instance;
} _GameAction_default_instance_;
class PlayerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlayerState>
      _instance;
} _PlayerState_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
class GameStartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameStart>
      _instance;
} _GameStart_default_instance_;
class GameMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameMessage>
      _instance;
  const ::sanguosha::LoginRequest* login_request_;
  const ::sanguosha::LoginResponse* login_response_;
  const ::sanguosha::Heartbeat* heartbeat_;
  const ::sanguosha::RoomRequest* room_request_;
  const ::sanguosha::RoomResponse* room_response_;
  const ::sanguosha::GameAction* game_action_;
  const ::sanguosha::GameState* game_state_;
  const ::sanguosha::GameStart* game_start_;
} _GameMessage_default_instance_;
}  // namespace sanguosha
namespace protobuf_proto_2fsanguosha_2eproto {
static void InitDefaultsLoginRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_LoginRequest_default_instance_;
    new (ptr) ::sanguosha::LoginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::LoginRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginRequest}, {}};

static void InitDefaultsLoginResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_LoginResponse_default_instance_;
    new (ptr) ::sanguosha::LoginResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::LoginResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LoginResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLoginResponse}, {}};

static void InitDefaultsHeartbeat() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_Heartbeat_default_instance_;
    new (ptr) ::sanguosha::Heartbeat();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::Heartbeat::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Heartbeat =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsHeartbeat}, {}};

static void InitDefaultsRoomInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_RoomInfo_default_instance_;
    new (ptr) ::sanguosha::RoomInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::RoomInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomInfo}, {}};

static void InitDefaultsRoomRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_RoomRequest_default_instance_;
    new (ptr) ::sanguosha::RoomRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::RoomRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RoomRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRoomRequest}, {}};

static void InitDefaultsRoomResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_RoomResponse_default_instance_;
    new (ptr) ::sanguosha::RoomResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::RoomResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RoomResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRoomResponse}, {
      &protobuf_proto_2fsanguosha_2eproto::scc_info_RoomInfo.base,}};

static void InitDefaultsGameAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_GameAction_default_instance_;
    new (ptr) ::sanguosha::GameAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::GameAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameAction}, {}};

static void InitDefaultsPlayerState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_PlayerState_default_instance_;
    new (ptr) ::sanguosha::PlayerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::PlayerState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PlayerState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPlayerState}, {}};

static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_GameState_default_instance_;
    new (ptr) ::sanguosha::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameState}, {
      &protobuf_proto_2fsanguosha_2eproto::scc_info_PlayerState.base,}};

static void InitDefaultsGameStart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_GameStart_default_instance_;
    new (ptr) ::sanguosha::GameStart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::GameStart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GameStart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGameStart}, {}};

static void InitDefaultsGameMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sanguosha::_GameMessage_default_instance_;
    new (ptr) ::sanguosha::GameMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sanguosha::GameMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<8> scc_info_GameMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsGameMessage}, {
      &protobuf_proto_2fsanguosha_2eproto::scc_info_LoginRequest.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_LoginResponse.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_Heartbeat.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_RoomRequest.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_RoomResponse.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameAction.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameState.base,
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameStart.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LoginRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LoginResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Heartbeat.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RoomResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlayerState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameStart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameMessage.base);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginRequest, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginRequest, password_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginResponse, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::LoginResponse, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::Heartbeat, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomInfo, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomInfo, players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomRequest, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomRequest, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomResponse, error_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::RoomResponse, room_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameAction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameAction, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameAction, target_player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::PlayerState, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::PlayerState, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::PlayerState, hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::PlayerState, max_hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::PlayerState, hand_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameState, current_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameState, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameState, phase_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameStart, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameStart, player_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameMessage, type_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, login_request_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, login_response_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, heartbeat_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, room_request_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, room_response_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, game_action_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, game_state_),
  offsetof(::sanguosha::GameMessageDefaultTypeInternal, game_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::sanguosha::GameMessage, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sanguosha::LoginRequest)},
  { 7, -1, sizeof(::sanguosha::LoginResponse)},
  { 15, -1, sizeof(::sanguosha::Heartbeat)},
  { 21, -1, sizeof(::sanguosha::RoomInfo)},
  { 28, -1, sizeof(::sanguosha::RoomRequest)},
  { 35, -1, sizeof(::sanguosha::RoomResponse)},
  { 43, -1, sizeof(::sanguosha::GameAction)},
  { 51, -1, sizeof(::sanguosha::PlayerState)},
  { 61, -1, sizeof(::sanguosha::GameState)},
  { 69, -1, sizeof(::sanguosha::GameStart)},
  { 76, -1, sizeof(::sanguosha::GameMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_Heartbeat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_RoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_RoomRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_RoomResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_GameAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_PlayerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_GameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_GameStart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::sanguosha::_GameMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/sanguosha.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025proto/sanguosha.proto\022\tsanguosha\"2\n\014Lo"
      "ginRequest\022\020\n\010username\030\001 \001(\t\022\020\n\010password"
      "\030\002 \001(\t\"H\n\rLoginResponse\022\017\n\007success\030\001 \001(\010"
      "\022\025\n\rerror_message\030\002 \001(\t\022\017\n\007user_id\030\003 \001(\r"
      "\"\036\n\tHeartbeat\022\021\n\ttimestamp\030\001 \001(\004\",\n\010Room"
      "Info\022\017\n\007room_id\030\001 \001(\r\022\017\n\007players\030\002 \003(\r\"E"
      "\n\013RoomRequest\022%\n\006action\030\001 \001(\0162\025.sanguosh"
      "a.RoomAction\022\017\n\007room_id\030\002 \001(\r\"^\n\014RoomRes"
      "ponse\022\017\n\007success\030\001 \001(\010\022\025\n\rerror_message\030"
      "\002 \001(\t\022&\n\troom_info\030\003 \001(\0132\023.sanguosha.Roo"
      "mInfo\"Y\n\nGameAction\022#\n\004type\030\001 \001(\0162\025.sang"
      "uosha.ActionType\022\017\n\007card_id\030\002 \001(\r\022\025\n\rtar"
      "get_player\030\003 \001(\r\"b\n\013PlayerState\022\021\n\tplaye"
      "r_id\030\001 \001(\r\022\020\n\010username\030\002 \001(\t\022\n\n\002hp\030\003 \001(\r"
      "\022\016\n\006max_hp\030\004 \001(\r\022\022\n\nhand_cards\030\005 \003(\r\"[\n\t"
      "GameState\022\026\n\016current_player\030\001 \001(\r\022\'\n\007pla"
      "yers\030\002 \003(\0132\026.sanguosha.PlayerState\022\r\n\005ph"
      "ase\030\003 \001(\r\"0\n\tGameStart\022\017\n\007room_id\030\001 \001(\r\022"
      "\022\n\nplayer_ids\030\002 \003(\r\"\267\003\n\013GameMessage\022$\n\004t"
      "ype\030\001 \001(\0162\026.sanguosha.MessageType\0220\n\rlog"
      "in_request\030\002 \001(\0132\027.sanguosha.LoginReques"
      "tH\000\0222\n\016login_response\030\003 \001(\0132\030.sanguosha."
      "LoginResponseH\000\022)\n\theartbeat\030\004 \001(\0132\024.san"
      "guosha.HeartbeatH\000\022.\n\014room_request\030\005 \001(\013"
      "2\026.sanguosha.RoomRequestH\000\0220\n\rroom_respo"
      "nse\030\006 \001(\0132\027.sanguosha.RoomResponseH\000\022,\n\013"
      "game_action\030\007 \001(\0132\025.sanguosha.GameAction"
      "H\000\022*\n\ngame_state\030\010 \001(\0132\024.sanguosha.GameS"
      "tateH\000\022*\n\ngame_start\030\t \001(\0132\024.sanguosha.G"
      "ameStartH\000B\t\n\007content*\246\001\n\013MessageType\022\013\n"
      "\007UNKNOWN\020\000\022\021\n\rLOGIN_REQUEST\020\001\022\022\n\016LOGIN_R"
      "ESPONSE\020\002\022\r\n\tHEARTBEAT\020\003\022\020\n\014ROOM_REQUEST"
      "\020\004\022\021\n\rROOM_RESPONSE\020\005\022\017\n\013GAME_ACTION\020\006\022\016"
      "\n\nGAME_STATE\020\007\022\016\n\nGAME_START\020\010*L\n\nRoomAc"
      "tion\022\017\n\013CREATE_ROOM\020\000\022\r\n\tJOIN_ROOM\020\001\022\016\n\n"
      "LEAVE_ROOM\020\002\022\016\n\nSTART_GAME\020\003*M\n\010CardType"
      "\022\020\n\014CARD_UNKNOWN\020\000\022\017\n\013CARD_ATTACK\020\001\022\017\n\013C"
      "ARD_DEFEND\020\002\022\r\n\tCARD_HEAL\020\003*7\n\nActionTyp"
      "e\022\024\n\020ACTION_PLAY_CARD\020\000\022\023\n\017ACTION_END_TU"
      "RN\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1572);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/sanguosha.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fsanguosha_2eproto
namespace sanguosha {
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fsanguosha_2eproto::file_level_enum_descriptors[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoomAction_descriptor() {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fsanguosha_2eproto::file_level_enum_descriptors[1];
}
bool RoomAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CardType_descriptor() {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fsanguosha_2eproto::file_level_enum_descriptors[2];
}
bool CardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2fsanguosha_2eproto::file_level_enum_descriptors[3];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LoginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kUsernameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_LoginRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:sanguosha.LoginRequest)
}

void LoginRequest::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:sanguosha.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_LoginRequest.base);
  return *internal_default_instance();
}


void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.LoginRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sanguosha.LoginRequest.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sanguosha.LoginRequest.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.LoginRequest.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.LoginRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.LoginRequest.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.LoginRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.LoginRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LoginResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kSuccessFieldNumber;
const int LoginResponse::kErrorMessageFieldNumber;
const int LoginResponse::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_LoginResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&success_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:sanguosha.LoginResponse)
}

void LoginResponse::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(user_id_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:sanguosha.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginResponse& LoginResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_LoginResponse.base);
  return *internal_default_instance();
}


void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&success_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.LoginResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sanguosha.LoginResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.LoginResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // uint32 user_id = 3;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.LoginResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // uint32 user_id = 3;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.LoginResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Heartbeat::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_Heartbeat.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sanguosha.Heartbeat)
}

void Heartbeat::SharedCtor() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:sanguosha.Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
}

void Heartbeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Heartbeat::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Heartbeat& Heartbeat::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_Heartbeat.base);
  return *internal_default_instance();
}


void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.Heartbeat)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.Heartbeat)
}

::google::protobuf::uint8* Heartbeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.Heartbeat)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Heartbeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Heartbeat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Heartbeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.Heartbeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.Heartbeat)
    MergeFrom(*source);
  }
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Heartbeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Heartbeat::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomInfo::kRoomIdFieldNumber;
const int RoomInfo::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomInfo::RoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_RoomInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:sanguosha.RoomInfo)
}

void RoomInfo::SharedCtor() {
  room_id_ = 0u;
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:sanguosha.RoomInfo)
  SharedDtor();
}

void RoomInfo::SharedDtor() {
}

void RoomInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomInfo::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomInfo& RoomInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_RoomInfo.base);
  return *internal_default_instance();
}


void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  room_id_ = 0u;
  _internal_metadata_.Clear();
}

bool RoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.RoomInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.RoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.RoomInfo)
  return false;
#undef DO_
}

void RoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // repeated uint32 players = 2;
  if (this->players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _players_cached_byte_size_));
  }
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->players(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.RoomInfo)
}

::google::protobuf::uint8* RoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.RoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // repeated uint32 players = 2;
  if (this->players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _players_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->players_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.RoomInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 players = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _players_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.RoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.RoomInfo)
    MergeFrom(*source);
  }
}

void RoomInfo::MergeFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.RoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void RoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::Swap(RoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomInfo::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomRequest::kActionFieldNumber;
const int RoomRequest::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomRequest::RoomRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_RoomRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.RoomRequest)
}
RoomRequest::RoomRequest(const RoomRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&room_id_) -
    reinterpret_cast<char*>(&action_)) + sizeof(room_id_));
  // @@protoc_insertion_point(copy_constructor:sanguosha.RoomRequest)
}

void RoomRequest::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(room_id_));
}

RoomRequest::~RoomRequest() {
  // @@protoc_insertion_point(destructor:sanguosha.RoomRequest)
  SharedDtor();
}

void RoomRequest::SharedDtor() {
}

void RoomRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomRequest::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomRequest& RoomRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_RoomRequest.base);
  return *internal_default_instance();
}


void RoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.RoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&room_id_) -
      reinterpret_cast<char*>(&action_)) + sizeof(room_id_));
  _internal_metadata_.Clear();
}

bool RoomRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.RoomRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sanguosha.RoomAction action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sanguosha::RoomAction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 room_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.RoomRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.RoomRequest)
  return false;
#undef DO_
}

void RoomRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.RoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sanguosha.RoomAction action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // uint32 room_id = 2;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->room_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.RoomRequest)
}

::google::protobuf::uint8* RoomRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.RoomRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sanguosha.RoomAction action = 1;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // uint32 room_id = 2;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->room_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.RoomRequest)
  return target;
}

size_t RoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.RoomRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sanguosha.RoomAction action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // uint32 room_id = 2;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.RoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.RoomRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.RoomRequest)
    MergeFrom(*source);
  }
}

void RoomRequest::MergeFrom(const RoomRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.RoomRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void RoomRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.RoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomRequest::CopyFrom(const RoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.RoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomRequest::IsInitialized() const {
  return true;
}

void RoomRequest::Swap(RoomRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomRequest::InternalSwap(RoomRequest* other) {
  using std::swap;
  swap(action_, other->action_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomRequest::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RoomResponse::InitAsDefaultInstance() {
  ::sanguosha::_RoomResponse_default_instance_._instance.get_mutable()->room_info_ = const_cast< ::sanguosha::RoomInfo*>(
      ::sanguosha::RoomInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoomResponse::kSuccessFieldNumber;
const int RoomResponse::kErrorMessageFieldNumber;
const int RoomResponse::kRoomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoomResponse::RoomResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_RoomResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.RoomResponse)
}
RoomResponse::RoomResponse(const RoomResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_message().size() > 0) {
    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_room_info()) {
    room_info_ = new ::sanguosha::RoomInfo(*from.room_info_);
  } else {
    room_info_ = NULL;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:sanguosha.RoomResponse)
}

void RoomResponse::SharedCtor() {
  error_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&room_info_)) + sizeof(success_));
}

RoomResponse::~RoomResponse() {
  // @@protoc_insertion_point(destructor:sanguosha.RoomResponse)
  SharedDtor();
}

void RoomResponse::SharedDtor() {
  error_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete room_info_;
}

void RoomResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RoomResponse::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RoomResponse& RoomResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_RoomResponse.base);
  return *internal_default_instance();
}


void RoomResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.RoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && room_info_ != NULL) {
    delete room_info_;
  }
  room_info_ = NULL;
  success_ = false;
  _internal_metadata_.Clear();
}

bool RoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.RoomResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_message().data(), static_cast<int>(this->error_message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sanguosha.RoomResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.RoomInfo room_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.RoomResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.RoomResponse)
  return false;
#undef DO_
}

void RoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.RoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.RoomResponse.error_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_message(), output);
  }

  // .sanguosha.RoomInfo room_info = 3;
  if (this->has_room_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_room_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.RoomResponse)
}

::google::protobuf::uint8* RoomResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.RoomResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // string error_message = 2;
  if (this->error_message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_message().data(), static_cast<int>(this->error_message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.RoomResponse.error_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_message(), target);
  }

  // .sanguosha.RoomInfo room_info = 3;
  if (this->has_room_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_room_info(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.RoomResponse)
  return target;
}

size_t RoomResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.RoomResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_message = 2;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_message());
  }

  // .sanguosha.RoomInfo room_info = 3;
  if (this->has_room_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *room_info_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.RoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RoomResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.RoomResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.RoomResponse)
    MergeFrom(*source);
  }
}

void RoomResponse::MergeFrom(const RoomResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.RoomResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_message().size() > 0) {

    error_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  if (from.has_room_info()) {
    mutable_room_info()->::sanguosha::RoomInfo::MergeFrom(from.room_info());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void RoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.RoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomResponse::CopyFrom(const RoomResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.RoomResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomResponse::IsInitialized() const {
  return true;
}

void RoomResponse::Swap(RoomResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomResponse::InternalSwap(RoomResponse* other) {
  using std::swap;
  error_message_.Swap(&other->error_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(room_info_, other->room_info_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RoomResponse::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameAction::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameAction::kTypeFieldNumber;
const int GameAction::kCardIdFieldNumber;
const int GameAction::kTargetPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameAction::GameAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.GameAction)
}
GameAction::GameAction(const GameAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_player_) -
    reinterpret_cast<char*>(&type_)) + sizeof(target_player_));
  // @@protoc_insertion_point(copy_constructor:sanguosha.GameAction)
}

void GameAction::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_player_) -
      reinterpret_cast<char*>(&type_)) + sizeof(target_player_));
}

GameAction::~GameAction() {
  // @@protoc_insertion_point(destructor:sanguosha.GameAction)
  SharedDtor();
}

void GameAction::SharedDtor() {
}

void GameAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameAction::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameAction& GameAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_GameAction.base);
  return *internal_default_instance();
}


void GameAction::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.GameAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_player_) -
      reinterpret_cast<char*>(&type_)) + sizeof(target_player_));
  _internal_metadata_.Clear();
}

bool GameAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.GameAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sanguosha.ActionType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sanguosha::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.GameAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.GameAction)
  return false;
#undef DO_
}

void GameAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.GameAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sanguosha.ActionType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_id(), output);
  }

  // uint32 target_player = 3;
  if (this->target_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_player(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.GameAction)
}

::google::protobuf::uint8* GameAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.GameAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sanguosha.ActionType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_id(), target);
  }

  // uint32 target_player = 3;
  if (this->target_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_player(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.GameAction)
  return target;
}

size_t GameAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.GameAction)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sanguosha.ActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 target_player = 3;
  if (this->target_player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_player());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.GameAction)
  GOOGLE_DCHECK_NE(&from, this);
  const GameAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.GameAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.GameAction)
    MergeFrom(*source);
  }
}

void GameAction::MergeFrom(const GameAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.GameAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.target_player() != 0) {
    set_target_player(from.target_player());
  }
}

void GameAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.GameAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAction::CopyFrom(const GameAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.GameAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAction::IsInitialized() const {
  return true;
}

void GameAction::Swap(GameAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameAction::InternalSwap(GameAction* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(card_id_, other->card_id_);
  swap(target_player_, other->target_player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameAction::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlayerState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerState::kPlayerIdFieldNumber;
const int PlayerState::kUsernameFieldNumber;
const int PlayerState::kHpFieldNumber;
const int PlayerState::kMaxHpFieldNumber;
const int PlayerState::kHandCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerState::PlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_PlayerState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.PlayerState)
}
PlayerState::PlayerState(const PlayerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hand_cards_(from.hand_cards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_hp_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(max_hp_));
  // @@protoc_insertion_point(copy_constructor:sanguosha.PlayerState)
}

void PlayerState::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_hp_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(max_hp_));
}

PlayerState::~PlayerState() {
  // @@protoc_insertion_point(destructor:sanguosha.PlayerState)
  SharedDtor();
}

void PlayerState::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PlayerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlayerState::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerState& PlayerState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_PlayerState.base);
  return *internal_default_instance();
}


void PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.PlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hand_cards_.Clear();
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_hp_) -
      reinterpret_cast<char*>(&player_id_)) + sizeof(max_hp_));
  _internal_metadata_.Clear();
}

bool PlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.PlayerState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sanguosha.PlayerState.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_hp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hand_cards = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_cards())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_hand_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.PlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.PlayerState)
  return false;
#undef DO_
}

void PlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.PlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->player_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.PlayerState.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // uint32 hp = 3;
  if (this->hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hp(), output);
  }

  // uint32 max_hp = 4;
  if (this->max_hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_hp(), output);
  }

  // repeated uint32 hand_cards = 5;
  if (this->hand_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _hand_cards_cached_byte_size_));
  }
  for (int i = 0, n = this->hand_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hand_cards(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.PlayerState)
}

::google::protobuf::uint8* PlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.PlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_id = 1;
  if (this->player_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sanguosha.PlayerState.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // uint32 hp = 3;
  if (this->hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hp(), target);
  }

  // uint32 max_hp = 4;
  if (this->max_hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_hp(), target);
  }

  // repeated uint32 hand_cards = 5;
  if (this->hand_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _hand_cards_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->hand_cards_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.PlayerState)
  return target;
}

size_t PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.PlayerState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 hand_cards = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hand_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hand_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // uint32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_id());
  }

  // uint32 hp = 3;
  if (this->hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp());
  }

  // uint32 max_hp = 4;
  if (this->max_hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_hp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.PlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.PlayerState)
    MergeFrom(*source);
  }
}

void PlayerState::MergeFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.PlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hand_cards_.MergeFrom(from.hand_cards_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.player_id() != 0) {
    set_player_id(from.player_id());
  }
  if (from.hp() != 0) {
    set_hp(from.hp());
  }
  if (from.max_hp() != 0) {
    set_max_hp(from.max_hp());
  }
}

void PlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerState::CopyFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {
  return true;
}

void PlayerState::Swap(PlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerState::InternalSwap(PlayerState* other) {
  using std::swap;
  hand_cards_.InternalSwap(&other->hand_cards_);
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_id_, other->player_id_);
  swap(hp_, other->hp_);
  swap(max_hp_, other->max_hp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlayerState::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kCurrentPlayerFieldNumber;
const int GameState::kPlayersFieldNumber;
const int GameState::kPhaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_player_, &from.current_player_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&current_player_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:sanguosha.GameState)
}

void GameState::SharedCtor() {
  ::memset(&current_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&current_player_)) + sizeof(phase_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:sanguosha.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  ::memset(&current_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&current_player_)) + sizeof(phase_));
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 current_player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sanguosha.PlayerState players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_player = 1;
  if (this->current_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->current_player(), output);
  }

  // repeated .sanguosha.PlayerState players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->players(static_cast<int>(i)),
      output);
  }

  // uint32 phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->phase(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_player = 1;
  if (this->current_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->current_player(), target);
  }

  // repeated .sanguosha.PlayerState players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->players(static_cast<int>(i)), deterministic, target);
  }

  // uint32 phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->phase(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.GameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .sanguosha.PlayerState players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // uint32 current_player = 1;
  if (this->current_player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_player());
  }

  // uint32 phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->phase());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.current_player() != 0) {
    set_current_player(from.current_player());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  swap(current_player_, other->current_player_);
  swap(phase_, other->phase_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameStart::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameStart::kRoomIdFieldNumber;
const int GameStart::kPlayerIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameStart::GameStart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameStart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.GameStart)
}
GameStart::GameStart(const GameStart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_ids_(from.player_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:sanguosha.GameStart)
}

void GameStart::SharedCtor() {
  room_id_ = 0u;
}

GameStart::~GameStart() {
  // @@protoc_insertion_point(destructor:sanguosha.GameStart)
  SharedDtor();
}

void GameStart::SharedDtor() {
}

void GameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameStart::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameStart& GameStart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_GameStart.base);
  return *internal_default_instance();
}


void GameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.GameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_ids_.Clear();
  room_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.GameStart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_player_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.GameStart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.GameStart)
  return false;
#undef DO_
}

void GameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.GameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->room_id(), output);
  }

  // repeated uint32 player_ids = 2;
  if (this->player_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _player_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->player_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.GameStart)
}

::google::protobuf::uint8* GameStart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.GameStart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->room_id(), target);
  }

  // repeated uint32 player_ids = 2;
  if (this->player_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _player_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.GameStart)
  return target;
}

size_t GameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.GameStart)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 player_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameStart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.GameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const GameStart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameStart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.GameStart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.GameStart)
    MergeFrom(*source);
  }
}

void GameStart::MergeFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.GameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_ids_.MergeFrom(from.player_ids_);
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void GameStart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStart::CopyFrom(const GameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.GameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStart::IsInitialized() const {
  return true;
}

void GameStart::Swap(GameStart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameStart::InternalSwap(GameStart* other) {
  using std::swap;
  player_ids_.InternalSwap(&other->player_ids_);
  swap(room_id_, other->room_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameStart::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameMessage::InitAsDefaultInstance() {
  ::sanguosha::_GameMessage_default_instance_.login_request_ = const_cast< ::sanguosha::LoginRequest*>(
      ::sanguosha::LoginRequest::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.login_response_ = const_cast< ::sanguosha::LoginResponse*>(
      ::sanguosha::LoginResponse::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.heartbeat_ = const_cast< ::sanguosha::Heartbeat*>(
      ::sanguosha::Heartbeat::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.room_request_ = const_cast< ::sanguosha::RoomRequest*>(
      ::sanguosha::RoomRequest::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.room_response_ = const_cast< ::sanguosha::RoomResponse*>(
      ::sanguosha::RoomResponse::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.game_action_ = const_cast< ::sanguosha::GameAction*>(
      ::sanguosha::GameAction::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.game_state_ = const_cast< ::sanguosha::GameState*>(
      ::sanguosha::GameState::internal_default_instance());
  ::sanguosha::_GameMessage_default_instance_.game_start_ = const_cast< ::sanguosha::GameStart*>(
      ::sanguosha::GameStart::internal_default_instance());
}
void GameMessage::set_allocated_login_request(::sanguosha::LoginRequest* login_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (login_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    content_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.login_request)
}
void GameMessage::set_allocated_login_response(::sanguosha::LoginResponse* login_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (login_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      login_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, login_response, submessage_arena);
    }
    set_has_login_response();
    content_.login_response_ = login_response;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.login_response)
}
void GameMessage::set_allocated_heartbeat(::sanguosha::Heartbeat* heartbeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (heartbeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      heartbeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    content_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.heartbeat)
}
void GameMessage::set_allocated_room_request(::sanguosha::RoomRequest* room_request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (room_request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room_request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room_request, submessage_arena);
    }
    set_has_room_request();
    content_.room_request_ = room_request;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.room_request)
}
void GameMessage::set_allocated_room_response(::sanguosha::RoomResponse* room_response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (room_response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      room_response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, room_response, submessage_arena);
    }
    set_has_room_response();
    content_.room_response_ = room_response;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.room_response)
}
void GameMessage::set_allocated_game_action(::sanguosha::GameAction* game_action) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (game_action) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_action = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_action, submessage_arena);
    }
    set_has_game_action();
    content_.game_action_ = game_action;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.game_action)
}
void GameMessage::set_allocated_game_state(::sanguosha::GameState* game_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (game_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_state, submessage_arena);
    }
    set_has_game_state();
    content_.game_state_ = game_state;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.game_state)
}
void GameMessage::set_allocated_game_start(::sanguosha::GameStart* game_start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_content();
  if (game_start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      game_start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, game_start, submessage_arena);
    }
    set_has_game_start();
    content_.game_start_ = game_start;
  }
  // @@protoc_insertion_point(field_set_allocated:sanguosha.GameMessage.game_start)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameMessage::kTypeFieldNumber;
const int GameMessage::kLoginRequestFieldNumber;
const int GameMessage::kLoginResponseFieldNumber;
const int GameMessage::kHeartbeatFieldNumber;
const int GameMessage::kRoomRequestFieldNumber;
const int GameMessage::kRoomResponseFieldNumber;
const int GameMessage::kGameActionFieldNumber;
const int GameMessage::kGameStateFieldNumber;
const int GameMessage::kGameStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameMessage::GameMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fsanguosha_2eproto::scc_info_GameMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:sanguosha.GameMessage)
}
GameMessage::GameMessage(const GameMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_content();
  switch (from.content_case()) {
    case kLoginRequest: {
      mutable_login_request()->::sanguosha::LoginRequest::MergeFrom(from.login_request());
      break;
    }
    case kLoginResponse: {
      mutable_login_response()->::sanguosha::LoginResponse::MergeFrom(from.login_response());
      break;
    }
    case kHeartbeat: {
      mutable_heartbeat()->::sanguosha::Heartbeat::MergeFrom(from.heartbeat());
      break;
    }
    case kRoomRequest: {
      mutable_room_request()->::sanguosha::RoomRequest::MergeFrom(from.room_request());
      break;
    }
    case kRoomResponse: {
      mutable_room_response()->::sanguosha::RoomResponse::MergeFrom(from.room_response());
      break;
    }
    case kGameAction: {
      mutable_game_action()->::sanguosha::GameAction::MergeFrom(from.game_action());
      break;
    }
    case kGameState: {
      mutable_game_state()->::sanguosha::GameState::MergeFrom(from.game_state());
      break;
    }
    case kGameStart: {
      mutable_game_start()->::sanguosha::GameStart::MergeFrom(from.game_start());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sanguosha.GameMessage)
}

void GameMessage::SharedCtor() {
  type_ = 0;
  clear_has_content();
}

GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:sanguosha.GameMessage)
  SharedDtor();
}

void GameMessage::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
}

void GameMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameMessage::descriptor() {
  ::protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameMessage& GameMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fsanguosha_2eproto::scc_info_GameMessage.base);
  return *internal_default_instance();
}


void GameMessage::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:sanguosha.GameMessage)
  switch (content_case()) {
    case kLoginRequest: {
      delete content_.login_request_;
      break;
    }
    case kLoginResponse: {
      delete content_.login_response_;
      break;
    }
    case kHeartbeat: {
      delete content_.heartbeat_;
      break;
    }
    case kRoomRequest: {
      delete content_.room_request_;
      break;
    }
    case kRoomResponse: {
      delete content_.room_response_;
      break;
    }
    case kGameAction: {
      delete content_.game_action_;
      break;
    }
    case kGameState: {
      delete content_.game_state_;
      break;
    }
    case kGameStart: {
      delete content_.game_start_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sanguosha.GameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_content();
  _internal_metadata_.Clear();
}

bool GameMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sanguosha.GameMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sanguosha.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sanguosha::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.LoginRequest login_request = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.LoginResponse login_response = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_login_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.Heartbeat heartbeat = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.RoomRequest room_request = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.RoomResponse room_response = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_room_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.GameAction game_action = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.GameState game_state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sanguosha.GameStart game_start = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_game_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sanguosha.GameMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sanguosha.GameMessage)
  return false;
#undef DO_
}

void GameMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sanguosha.GameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sanguosha.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sanguosha.LoginRequest login_request = 2;
  if (has_login_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_login_request(), output);
  }

  // .sanguosha.LoginResponse login_response = 3;
  if (has_login_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_login_response(), output);
  }

  // .sanguosha.Heartbeat heartbeat = 4;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_heartbeat(), output);
  }

  // .sanguosha.RoomRequest room_request = 5;
  if (has_room_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_room_request(), output);
  }

  // .sanguosha.RoomResponse room_response = 6;
  if (has_room_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_room_response(), output);
  }

  // .sanguosha.GameAction game_action = 7;
  if (has_game_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_game_action(), output);
  }

  // .sanguosha.GameState game_state = 8;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_game_state(), output);
  }

  // .sanguosha.GameStart game_start = 9;
  if (has_game_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_game_start(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:sanguosha.GameMessage)
}

::google::protobuf::uint8* GameMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sanguosha.GameMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sanguosha.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sanguosha.LoginRequest login_request = 2;
  if (has_login_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_login_request(), deterministic, target);
  }

  // .sanguosha.LoginResponse login_response = 3;
  if (has_login_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_login_response(), deterministic, target);
  }

  // .sanguosha.Heartbeat heartbeat = 4;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_heartbeat(), deterministic, target);
  }

  // .sanguosha.RoomRequest room_request = 5;
  if (has_room_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_room_request(), deterministic, target);
  }

  // .sanguosha.RoomResponse room_response = 6;
  if (has_room_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_room_response(), deterministic, target);
  }

  // .sanguosha.GameAction game_action = 7;
  if (has_game_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_game_action(), deterministic, target);
  }

  // .sanguosha.GameState game_state = 8;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_game_state(), deterministic, target);
  }

  // .sanguosha.GameStart game_start = 9;
  if (has_game_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_game_start(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sanguosha.GameMessage)
  return target;
}

size_t GameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sanguosha.GameMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .sanguosha.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (content_case()) {
    // .sanguosha.LoginRequest login_request = 2;
    case kLoginRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.login_request_);
      break;
    }
    // .sanguosha.LoginResponse login_response = 3;
    case kLoginResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.login_response_);
      break;
    }
    // .sanguosha.Heartbeat heartbeat = 4;
    case kHeartbeat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.heartbeat_);
      break;
    }
    // .sanguosha.RoomRequest room_request = 5;
    case kRoomRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.room_request_);
      break;
    }
    // .sanguosha.RoomResponse room_response = 6;
    case kRoomResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.room_response_);
      break;
    }
    // .sanguosha.GameAction game_action = 7;
    case kGameAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.game_action_);
      break;
    }
    // .sanguosha.GameState game_state = 8;
    case kGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.game_state_);
      break;
    }
    // .sanguosha.GameStart game_start = 9;
    case kGameStart: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *content_.game_start_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sanguosha.GameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sanguosha.GameMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sanguosha.GameMessage)
    MergeFrom(*source);
  }
}

void GameMessage::MergeFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sanguosha.GameMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.content_case()) {
    case kLoginRequest: {
      mutable_login_request()->::sanguosha::LoginRequest::MergeFrom(from.login_request());
      break;
    }
    case kLoginResponse: {
      mutable_login_response()->::sanguosha::LoginResponse::MergeFrom(from.login_response());
      break;
    }
    case kHeartbeat: {
      mutable_heartbeat()->::sanguosha::Heartbeat::MergeFrom(from.heartbeat());
      break;
    }
    case kRoomRequest: {
      mutable_room_request()->::sanguosha::RoomRequest::MergeFrom(from.room_request());
      break;
    }
    case kRoomResponse: {
      mutable_room_response()->::sanguosha::RoomResponse::MergeFrom(from.room_response());
      break;
    }
    case kGameAction: {
      mutable_game_action()->::sanguosha::GameAction::MergeFrom(from.game_action());
      break;
    }
    case kGameState: {
      mutable_game_state()->::sanguosha::GameState::MergeFrom(from.game_state());
      break;
    }
    case kGameStart: {
      mutable_game_start()->::sanguosha::GameStart::MergeFrom(from.game_start());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void GameMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sanguosha.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sanguosha.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMessage::IsInitialized() const {
  return true;
}

void GameMessage::Swap(GameMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameMessage::InternalSwap(GameMessage* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(content_, other->content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameMessage::GetMetadata() const {
  protobuf_proto_2fsanguosha_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fsanguosha_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sanguosha
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::LoginRequest* Arena::CreateMaybeMessage< ::sanguosha::LoginRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::LoginRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::LoginResponse* Arena::CreateMaybeMessage< ::sanguosha::LoginResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::LoginResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::Heartbeat* Arena::CreateMaybeMessage< ::sanguosha::Heartbeat >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::Heartbeat >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::RoomInfo* Arena::CreateMaybeMessage< ::sanguosha::RoomInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::RoomInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::RoomRequest* Arena::CreateMaybeMessage< ::sanguosha::RoomRequest >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::RoomRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::RoomResponse* Arena::CreateMaybeMessage< ::sanguosha::RoomResponse >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::RoomResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::GameAction* Arena::CreateMaybeMessage< ::sanguosha::GameAction >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::GameAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::PlayerState* Arena::CreateMaybeMessage< ::sanguosha::PlayerState >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::PlayerState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::GameState* Arena::CreateMaybeMessage< ::sanguosha::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::GameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::GameStart* Arena::CreateMaybeMessage< ::sanguosha::GameStart >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::GameStart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::sanguosha::GameMessage* Arena::CreateMaybeMessage< ::sanguosha::GameMessage >(Arena* arena) {
  return Arena::CreateInternal< ::sanguosha::GameMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
